generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model OpeningHours {
  id             Int      @id @default(autoincrement())
  mondayStart    DateTime @db.Timestamptz
  mondayEnd      DateTime @db.Timestamptz
  tuesdayStart   DateTime @db.Timestamptz
  tuesdayEnd     DateTime @db.Timestamptz
  wednesdayStart DateTime @db.Timestamptz
  wednesdayEnd   DateTime @db.Timestamptz
  thursdayStart  DateTime @db.Timestamptz
  thursdayEnd    DateTime @db.Timestamptz
  fridayStart    DateTime @db.Timestamptz
  fridayEnd      DateTime @db.Timestamptz
  saturdayStart  DateTime @db.Timestamptz
  saturdayEnd    DateTime @db.Timestamptz
  sundayStart    DateTime @db.Timestamptz
  sundayEnd      DateTime @db.Timestamptz
}

model VisitorCount {
  id    Int @id @default(autoincrement())
  count Int
}

model Image {
  id       String @id @default(cuid())
  imageKey String
  imageUrl String
  category String
}

model Address {
  id            Int    @id @default(autoincrement())
  streetAddress String
  postalCode    String
  city          String
  country       String
  phone         String
  email         String
}

model Yurt {
  id    Int @id @default(autoincrement())
  price Int
}

model Cabin {
  id    Int @id @default(autoincrement())
  price Int
}

model User {
  id            String    @id
  name          String
  email         String    @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
